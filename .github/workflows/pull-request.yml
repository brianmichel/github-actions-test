name: "pull request"
on:
  pull_request:
    types: [opened, reopened, synchronize, edited]
    branches:
      - main

jobs:
  optimize_ci:
    runs-on: ubuntu-latest
    steps:
      - name: "PR Check"
        # Run the optimizer if we're opened, reopened, synchronized, or if our
        # base branch has changed. This will try to ensure that we don't let
        # untested code in.
        if: |
          (github.event.action == 'edited' && github.event.changes.base) ||
          github.event.action == 'opened' ||
          github.event.action == 'reopened' ||
          github.event.action == 'synchronize'
        run: |
          echo "github context\n ${{ toJson(github) }}"
  create_values:
    runs-on: ubuntu-latest
    needs: [optimize_ci]
    strategy:
      matrix:
        value: ['a', 'b', 'c']
    steps:
      - name: Print ${{ matrix.value }}
        shell: bash
        run: |
          echo "I'm value ${{ matrix.value }}"
      - uses: cloudposse/github-action-matrix-outputs-write@v1
        id: out
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.value }}
          outputs: |-
            matrix_value: ${{ matrix.value }}
            other_thing: ${{ join(matrix.value, 'lol') }}
  read:
    runs-on: ubuntu-latest
    needs: [create_values, optimize_ci]
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@v1
        id: read
        with:
          matrix-step-name: create_values
      - name: "Serialize Into Array"
        id: serialize
        run: |-
          set -eux
          echo '${{ toJson(steps.read.outputs.result)}}'
          DATA=$(echo '${{ toJson(steps.read.outputs.result)}}' | jq -rc 'fromjson | [ to_entries[] | { key: .key, value: .value | to_entries[] } | { key: .value.key, value: { (.key): .value.value } }] | reduce .[] as $item ( {}; . + { ($item.key): ( (.[($item.key)] // {}) + $item.value)}) | [.[]] | .')
          echo "result=$DATA" >> "$GITHUB_OUTPUT"
    outputs:
      result: ${{ steps.serialize.outputs.result }}

  assert_matrix:
    name: "Assert ${{ matrix.configuration.matrix_value }}"
    runs-on: ubuntu-latest
    needs: [read]
    strategy:
      matrix:
        configuration: ${{ fromJson(needs.read.outputs.result) }}
    steps:
      - name: "Dump Info"
        run: |-
          echo ${{ needs.read.outputs.result }}
          echo "fromJSON: ${{ fromJson(needs.read.outputs.result) }}"
          echo ${{ matrix.configuration.matrix_value }}
      - name: "Echo"
        run: |-
          echo "stuff ${{ matrix.configuration.matrix_value }}"
          echo "other ${{ matrix.configuration.other_thing }}"

